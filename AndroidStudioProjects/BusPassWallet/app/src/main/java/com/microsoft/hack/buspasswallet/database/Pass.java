package com.microsoft.hack.buspasswallet.database;

import org.greenrobot.greendao.annotation.*;
import org.greenrobot.greendao.DaoException;

import java.util.Calendar;
import java.util.Date;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "PASS".
 */
@Entity(active = true)
public class Pass {

    public static final int AC_MONTHLY = 0;
    public static final int NORMAL_MONTHLY = 1;
    public static final int AC_DAILY = 2;
    public static final int NORMAL_DAILY = 3;

    @Id
    private Long id;
    private java.util.Date validFrom;
    private java.util.Date validTo;
    private Integer type;
    private Long userId;

    /**
     * Used to resolve relations
     */
    @Generated
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    @Generated
    private transient PassDao myDao;

    @ToOne(joinProperty = "userId")
    private User user;

    @Generated
    private transient Long user__resolvedKey;

    @Generated
    public Pass() {
    }

    public Pass(Long id) {
        this.id = id;
    }

    @Generated
    public Pass(Long id, java.util.Date validFrom, java.util.Date validTo, Integer type, Long userId) {
        this.id = id;
        this.validFrom = validFrom;
        this.validTo = validTo;
        this.type = type;
        this.userId = userId;
    }

    public Pass(Date validFrom, long userId, int type) {
        this.id = null;
        this.validFrom = validFrom;
        this.userId = userId;
        this.type = type;
        setValidTo();
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPassDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getValidFrom() {
        return validFrom;
    }

    public void setValidFrom(java.util.Date validFrom) {
        this.validFrom = validFrom;
    }

    public java.util.Date getValidTo() {
        return validTo;
    }

    public void setValidTo(java.util.Date validTo) {
        this.validTo = validTo;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    @Generated
    public User getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
                user__resolvedKey = __key;
            }
        }
        return user;
    }

    @Generated
    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    private void setValidTo() {
        Calendar c = Calendar.getInstance();
        c.setTime(validFrom);

        switch (type) {
            case AC_MONTHLY:
            case NORMAL_MONTHLY:
                c.add(Calendar.MONTH, 1);
                c.set(Calendar.DAY_OF_MONTH, 1);
                c.set(Calendar.HOUR_OF_DAY, 0);
                c.set(Calendar.MINUTE, 0);
                c.set(Calendar.SECOND, 0);
                c.set(Calendar.MILLISECOND, 0);
                break;
            case AC_DAILY:
            case NORMAL_DAILY:
                c.add(Calendar.DATE, 1);
                c.set(Calendar.HOUR_OF_DAY, 0);
                c.set(Calendar.MINUTE, 0);
                c.set(Calendar.SECOND, 0);
                c.set(Calendar.MILLISECOND, 0);
                break;
        }

        validTo = c.getTime();
    }

    public String getTypeString() {
        switch (type) {
            case AC_MONTHLY:
                return "AC Monthly";
            case NORMAL_MONTHLY:
                return "Normal Monthly";
            case AC_DAILY:
                return "AC Daily";
            case NORMAL_DAILY:
                return "Normal Daily";
        }

        return "Invalid Pass";
    }

    public boolean expired() {
        Calendar c = Calendar.getInstance();

        return c.getTime().after(validTo) ? true : false;
    }

    public static Pass generatePassFromNow(User user, int passType) {
        Calendar c = Calendar.getInstance();
        return new Pass(c.getTime(), user.getId(), passType);
    }
}
